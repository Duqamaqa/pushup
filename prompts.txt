=== PROMPT 28a — Achievements / Badges ===
Add Achievements per exercise.

DATA:
- Extend each exercise: badges: string[] (earned ids)
- Define ACHIEVEMENTS (id, title, rule):
  * first_day: done>=1 on any day
  * week100: sum last 7 days >= 100
  * streak3: streak>=3
  * streak7: streak>=7
  * total500: lifetime done >= 500
  * goal100: 100%+ day completion 3 times

LOGIC:
- Track lifetimeDone per ex (sum history on demand or cache).
- After any log/save/rollover, run checkAchievements(ex) -> push new ids to badges (no duplicates).

UI:
- In card header, show tiny badges row if any (max 3), tooltip = title.
- In History modal, add “Achievements” block listing earned titles.

Return only:
1) JS: ACHIEVEMENTS array, checkAchievements(ex) function, calls where you save progress.
2) Minimal card badge markup (small inline list) and tiny CSS for .badge (12–14px).


=== PROMPT 28b — Daily Quote / Tip ===
Add a Daily Quote/Tip area under the big number (single line).

INDEX.HTML:
- In the card, just below .ex-progress, add: <div class="ex-tip" id="tip-{{id}}"></div>

STYLE.CSS:
.ex-tip { font-size: 13px; opacity:.85; text-align:center; margin:4px 0 6px; }

APP.JS:
- Add a small QUOTES array (10–20 items).
- function dailyQuote(seedStr){
   const s = (seedStr + todayStrUTC()).split('').reduce((a,c)=>a+c.charCodeAt(0),0);
   return QUOTES[s % QUOTES.length];
  }
- In renderDashboard(), setText(qs(card, '#tip-'+ex.id), dailyQuote(ex.exerciseName||''));


=== PROMPT 28c — Personal Bests (PBs) ===
Compute and display Personal Bests.

JS:
- function maxDayDone(ex){ iterate history => return {date, value} }
- function longestStreak(ex){ reuse streak function -> also return best length ever; cache per ex.id }

UI:
- In openHistory(ex), add a PBs line at the top:
  “PB Day: {date} {value} • Longest Streak: {n}”
- (Optional) In card header, add a tiny “PB {value}” pill.

CSS:
.pill { font-size:12px; padding:3px 8px; border-radius:999px; background:rgba(255,255,255,.08) }


=== PROMPT 28d — Trends Chart (monthly) ===
Add a "Trends" tab in History modal with a 30-day totals chart.

HTML:
- In history modal, above the chart, add two tabs:
  <div class="tabs"><button id="tabRecent">Recent</button><button id="tabTrends">Trends</button></div>

JS:
- Keep current 14-day planned/done as “Recent”.
- For “Trends”: days = last 30 dates; dataset = DONE totals per day (optional second = PLANNED).
- Lazy-load Chart.js if not loaded; on tab click, rebuild chart with the other dataset.
- Persist last active tab in localStorage 'historyTab'.

CSS:
.tabs { display:flex; gap:8px; margin-bottom:8px; }
.tabs button { padding:6px 10px; border-radius:10px; }
.tabs button.active { background: var(--accent); color: var(--btn-fg); }


=== PROMPT 28e — Multi-unit Support (reps / min / km) ===
Add units per exercise.

DATA:
- ex.unit: 'reps' | 'min' | 'km' (default 'reps')

EDIT UI:
- In Add/Edit modal, add:
  <label>Unit</label>
  <select id="unitSel">
    <option value="reps">reps</option>
    <option value="min">min</option>
    <option value="km">km</option>
  </select>
- On open: unitSel.value = ex.unit || 'reps'
- On save: ex.unit = unitSel.value

RENDER:
- Where you show numbers (Daily/Done/Left, labels, share card, history rows), append unit short label (reps/min/km).
- Quick steps remain numeric; labels show “−N” (unit implied).


=== PROMPT 28f — Exercise Templates on Add ===
Add templates for quick exercise creation with “Custom” fallback.

DATA (app.js):
const EX_TEMPLATES = [
 {name:'Push-ups', unit:'reps', daily:50, steps:[10,20]},
 {name:'Squats', unit:'reps', daily:60, steps:[10,20]},
 {name:'Plank', unit:'min',  daily:5,  steps:[1]},
 {name:'Running',unit:'km',  daily:3,  steps:[1]}
];

UI (Add modal):
- At top: a horizontal list of template buttons + a "Custom" button.
- On template click: prefill fields (name, dailyTarget, unit, quickSteps).
- “Custom” resets to empty.

CSS:
.template-row { display:flex; gap:8px; margin-bottom:8px; overflow:auto; }
.template-row .pill { padding:8px 10px; border-radius:999px; background:rgba(255,255,255,.08); cursor:pointer; }
.template-row .pill:hover { background:rgba(255,255,255,.14); }

JS:
- Prefill handler to set inputs; keep ability to edit before Save.


=== PROMPT 28g — Shareable Progress Card (image) ===
Create a shareable image for the selected exercise (last 7 days stats).

UI:
- In Settings → Per Exercise, add a button “Share Progress Card”.

JS:
- function renderShareCard(ex):
   * create <canvas> 1080x1080
   * draw: title (ex.name + unit), week total done, current streak, a small 7-day bars/spark, date range
   * colors from CSS vars (--fg, --accent), append units to labels
   * const url = canvas.toDataURL('image/png'); open in new tab or trigger download

- Wire the Settings button to call renderShareCard for the selected exercise.


=== PROMPT 28h — Friend Leaderboard (Supabase, optional) ===
Add an optional Friend Leaderboard using Supabase. Hide UI if not configured.

SETUP:
- In app.js add:
  let SUPABASE_URL = localStorage.getItem('lbUrl') || '';
  let SUPABASE_ANON = localStorage.getItem('lbKey') || '';
  let LB_NAME = localStorage.getItem('lbName') || '';

UI (Settings → Global):
- Inputs: Name (id="lbName"), Supabase URL (id="lbUrl"), Supabase Key (id="lbKey")
- Buttons: Save (id="lbSave"), Friend Leaderboard (id="lbOpen")
- If either URL or Key missing, hide leaderboard button.

DB:
- Supabase table 'leaderboard' (id uuid default uuid_generate_v4(), name text, total int, week text)
- RLS off or suitable policy for anon inserts/reads.

JS:
function computeWeeklyTotalAll(){
  const list = loadExercises() || [];
  return (list||[]).reduce((sum,ex)=>{
    const days = getRecentDays(7);
    let s=0; for (const d of days){ s += (ex.history?.[d]?.done)||0; }
    return sum + s;
  },0);
}
async function upsertScore(name,total){
  if (!SUPABASE_URL || !SUPABASE_ANON) return;
  const body = [{ name, total, week: lastSundayStr() }];
  await fetch(`${SUPABASE_URL}/rest/v1/leaderboard`, {
    method:'POST',
    headers:{
      'apikey':SUPABASE_ANON,
      'Authorization':'Bearer '+SUPABASE_ANON,
      'Content-Type':'application/json',
      'Prefer':'resolution=merge-duplicates'
    },
    body: JSON.stringify(body)
  }).catch(()=>{});
}
async function loadLeaderboard(){
  if (!SUPABASE_URL || !SUPABASE_ANON) return [];
  const res = await fetch(`${SUPABASE_URL}/rest/v1/leaderboard?select=*&week=eq.${lastSundayStr()}&order=total.desc&limit=10`, {
    headers:{ 'apikey':SUPABASE_ANON, 'Authorization':'Bearer '+SUPABASE_ANON }
  });
  return res.ok ? res.json() : [];
}

- On Settings Save: store lbName/lbUrl/lbKey to localStorage, update globals, toggle button visibility.
- On app open and after logging reps: if configured and LB_NAME set, call upsertScore(LB_NAME, computeWeeklyTotalAll()).
- On “Friend Leaderboard” click: open a modal listing top 10 (name + total). Hide if not configured.

CSS:
.basic-list { display:grid; gap:6px; font-size:14px; }